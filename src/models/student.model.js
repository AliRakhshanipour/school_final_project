
import { Model, DataTypes } from "sequelize";

export class Student extends Model {
    static associate(models) {
        Student.hasOne(models.FamilyInfo, {
            foreignKey: "student_id",
            onDelete: "CASCADE",
            onUpdate: "CASCADE"
        });

        Student.hasOne(models.EducationInfo, {
            foreignKey: "student_id",
            onDelete: "CASCADE",
            onUpdate: "CASCADE"
        });

    }

    static async createStudentWithFamilyInfo(studentData, familyInfoData, educationInfoData, FamilyInfoModel, EducationInfoModel) {
        let transaction;
        try {
            transaction = await this.sequelize.transaction();

            const student = await this.create(studentData, { transaction });
            const studentId = student.id; // Assuming 'id' is auto-generated by Sequelize

            // Check if familyInfoData and educationInfoData are defined and have 'student_id' property
            if (familyInfoData) {
                familyInfoData.student_id = studentId;
                await FamilyInfoModel.create(familyInfoData, { transaction });
            }

            if (educationInfoData) {
                educationInfoData.student_id = studentId;
                await EducationInfoModel.create(educationInfoData, { transaction });
            }

            await transaction.commit();
            return student;
        } catch (error) {
            if (transaction) {
                await transaction.rollback();
            }
            console.error("Error in creating family information:", error);
            throw error;
        }
    }

    static async updateStudentWithFamilyInfo(studentId, studentData, familyInfoData, educationInfoData, FamilyInfoModel, EducationInfoModel) {
        let transaction;
        try {
            transaction = await this.sequelize.transaction();

            // Update student
            await this.update(studentData, { where: { id: studentId }, transaction });

            if (familyInfoData) {
                await FamilyInfoModel.update(familyInfoData, { where: { student_id: studentId }, transaction });
            }
            if (educationInfoData) {
                await EducationInfoModel.update(educationInfoData, { where: { student_id: studentId }, transaction });
            }


            await transaction.commit();
            return await this.findByPk(studentId);

        } catch (error) {
            if (transaction) {
                await transaction.rollback();
            }
            console.error("Error in updating student with related information:", error);
            throw error;
        }
    }




    // Getter for the full name
    get fullname() {
        return `${this.first_name} ${this.last_name}`;
    }

}

export function initStudent(sequelize) {
    return Student.init({
        id: {
            type: DataTypes.INTEGER,
            primaryKey: true,
            autoIncrement: true
        },
        first_name: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notNull: {
                    msg: "نام دانش‌آموز نمیتواند خالی بماند"
                },
                notEmpty: {
                    msg: "نام دانش‌آموز نمیتواند خالی بماند"
                }
            }
        },
        last_name: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notNull: {
                    msg: "نام خانوادگی دانش‌آموز نمیتواند خالی بماند"
                },
                notEmpty: {
                    msg: "نام خانوادگی دانش‌آموز نمیتواند خالی بماند"
                }
            }
        },
        national_code: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: "کد ملی دانش‌آموز نمیتواند خالی بماند"
                }
            }
        },
        passport_serial: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: "شماره شناسنامه دانش‌آموز نمیتواند خالی بماند"
                }
            }
        },
        father_name: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: "نام پدر نمیتواند خالی بماند"
                }
            }
        },
        phone_number: {
            type: DataTypes.STRING,
            allowNull: false,
            defaultValue: "",
            validate: {
                is: {
                    args: /^[0-9]{10,15}$/,
                    msg: "فرمت شماره همراه را به درستی وارد نمایید"
                }
            }
        },
        birth_date: {
            type: DataTypes.DATEONLY,
            allowNull: false,
        },
        birth_city: {
            type: DataTypes.STRING,
            allowNull: false,
            validate: {
                notEmpty: {
                    msg: "شهر محل تولد دانش‌آموز نمیتواند خالی بماند"
                }
            }
        },
        religion: {
            type: DataTypes.ENUM,
            values: ['شیعه', 'سنی', 'سایر'],
            allowNull: false,
            validate: {
                notNull: {
                    msg: "مذهب نمیتواند خالی بماند"
                },
                isIn: {
                    args: [['شیعه', 'سنی', 'سایر']],
                    msg: "مذهب را به درستی وارد نمایید"
                }
            }
        },
        is_international: {
            type: DataTypes.BOOLEAN,
            allowNull: false,
            defaultValue: false
        },
        physical_condition: {
            type: DataTypes.ENUM,
            values: ['سالم', 'دارای معلولیت'],
            allowNull: false,
            validate: {
                notNull: {
                    msg: "وضعیت جسمانی دانش‌آموز نمیتواند خالی بماند"
                },
                isIn: {
                    args: [['سالم', 'دارای معلولیت']],
                    msg: "وضعیت جسمانی دانش‌آموز را به درستی انتخاب کنید"
                }
            }
        },
        left_handed: {
            type: DataTypes.BOOLEAN,
            defaultValue: false
        },
        acception_status: {
            type: DataTypes.ENUM,
            values: ['پذیرفته شده', 'رد شده', 'در حال پردازش'],
            defaultValue: 'در حال پردازش',
        },
        accepted_field: {
            type: DataTypes.STRING,
            defaultValue: null
        },
    }, {
        sequelize,
        modelName: "Student",
        tableName: "students",
    });
}

